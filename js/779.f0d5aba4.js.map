{"version":3,"file":"js/779.f0d5aba4.js","mappings":"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","sources":["webpack://network_demo/./src/views/NetworkG6.vue","webpack://network_demo/./src/views/NetworkG6.vue?80f5"],"sourcesContent":["<template>\r\n  <div class=\"g6-container\" id=\"g6-container\" style=\"height: 100%;\">\r\n  </div>\r\n  <div class=\"minimap-container\" id=\"minimap-container\" style=\"width: 200px; height: 120px; overflow: hidden;position: absolute;left: 10px;bottom: 20px;border: 1px solid rgba(255,255,255,0.15)\">\r\n  </div>\r\n  <div class=\"toolbar-container\" id=\"toolbar-container\" style=\"width: 50px;height:500px;overflow: hidden;position: absolute;right: 10px;top: 70px;\">\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport {reactive, onMounted, watch} from \"vue\";\r\nimport G6 from \"@antv/g6\";\r\n\r\nimport { useDataSetStore } from '@/stores/dataset'\r\nconst dataSetStore = useDataSetStore()\r\nvar processed_dataset = dataSetStore.current_data;\r\n\r\n\r\n/**\r\n * format the string\r\n * @param {string} str The origin string\r\n * @param {number} maxWidth max width\r\n * @param {number} fontSize font size\r\n * @return {string} the processed result\r\n */\r\n\r\nvar graph = reactive([]);//初始化\r\nconst tooltip = new G6.Tooltip({\r\n  offsetX: 10,\r\n  offsetY: 10,\r\n  fixToNode: [1, 0.5],\r\n  // the types of items that allow the tooltip show up\r\n  // 允许出现 tooltip 的 item 类型\r\n  itemTypes: ['node', 'edge'],\r\n  // custom the tooltip's content\r\n  // 自定义 tooltip 内容\r\n  getContent: (e) => {\r\n    const outDiv = document.createElement('div');\r\n    outDiv.style.width = 'fit-content';\r\n    outDiv.style.height = 'fit-content';\r\n    const model = e.item.getModel();\r\n    if (e.item.getType() === 'node') {\r\n      outDiv.innerHTML = `<b>ID:</b> ${model.id}<br/>\r\n                            <b>Term:</b> ${model.term}<br/>\r\n                            <b>Semantic type:</b> ${model.semantic_type}<br/>\r\n                            <b>Category:</b> ${model.category}<br/>`;\r\n    } else {\r\n      const source = e.item.getSource();\r\n      const target = e.item.getTarget();\r\n      outDiv.innerHTML = `<b>From:</b> ${source.getModel().label}<br/>\r\n                            <b>To:</b> ${target.getModel().label}<br/>\r\n                            <b>Cosine similarity:</b> ${e.item.getModel().title}`;\r\n    }\r\n    return outDiv;\r\n  },\r\n});\r\n\r\n// 实例化 minimap 插件\r\nconst minimap = new G6.Minimap({\r\n  container: \"minimap-container\",\r\n  className: \"minimap-container\",\r\n  // size: [100, 100],\r\n  type: 'keyShape',\r\n});\r\nconst colors = [\r\n  '#BDD2FD',\r\n  '#BDEFDB',\r\n  '#C2C8D5',\r\n  '#FBE5A2',\r\n  '#F6C3B7',\r\n  '#B6E3F5',\r\n  '#D3C6EA',\r\n  '#FFD8B8',\r\n  '#AAD8D8',\r\n  '#FFD6E7',\r\n];\r\nconst strokes = [\r\n  '#5B8FF9',\r\n  '#5AD8A6',\r\n  '#5D7092',\r\n  '#F6BD16',\r\n  '#E8684A',\r\n  '#6DC8EC',\r\n  '#9270CA',\r\n  '#FF9D4D',\r\n  '#269A99',\r\n  '#FF99C3',\r\n];\r\nfunction clustering(processed_dataset){\r\n  const clusterMap = new Map();\r\n  let clusterId = 0;\r\n  processed_dataset.nodes.forEach(function (node) {\r\n    // cluster\r\n    if (node.cluster && clusterMap.get(node.cluster) === undefined) {\r\n      clusterMap.set(node.cluster, clusterId);\r\n      clusterId++;\r\n    }\r\n    const cid = clusterMap.get(node.cluster);\r\n    if (!node.style) {\r\n      node.style = {};\r\n    }\r\n    if (!node.labelCfg) {\r\n      node.labelCfg = {};\r\n    }\r\n    if (!node.labelCfg.style) {\r\n      node.labelCfg.style = {};\r\n    }\r\n    node.style.fill = colors[cid % colors.length];\r\n    node.style.stroke = strokes[cid % strokes.length];\r\n    node.labelCfg.style.fill = strokes[cid % strokes.length];\r\n  });\r\n  processed_dataset.edges.forEach(function (edge) {\r\n    if (!edge.style) {\r\n      edge.style = {};\r\n    }\r\n    edge.size = edge.title/1.5;\r\n    edge.style.strokeOpacity = edge.title/1.5;\r\n  });\r\n  return processed_dataset\r\n}\r\nprocessed_dataset = clustering(processed_dataset);\r\n\r\nconst toolbar = new G6.ToolBar({\r\n  container:'toolbar-container',\r\n});\r\n\r\nfunction initG6() {\r\n  const container = document.getElementById(\"g6-container\");\r\n  // const descriptionDiv = document.createElement('div');\r\n  // descriptionDiv.innerHTML = `Rendering`;\r\n  // descriptionDiv.style.color = 'white';\r\n  // descriptionDiv.style.fontSize = '500px';\r\n  // container.appendChild(descriptionDiv);\r\n  const width = container.offsetWidth;\r\n  const height = container.offsetHeight;\r\n  // console.log(height)\r\n  // const nodes = this.getData.nodes;\r\n  //   this.nodeEach(nodes);\r\n  graph = new G6.Graph({\r\n    // 1.画图挂载容器id\r\n    container: \"g6-container\",\r\n    // 1.1容器宽高\r\n    width,\r\n    height,\r\n    plugins: [tooltip, minimap, toolbar],  //\r\n    fitView: true,\r\n    fitViewPadding: [20, 40, 50, 20],\r\n    /* force layout*/\r\n    // layout: {\r\n    //   type: 'force',\r\n    //   animate: false, // 设置为 false 可关闭布局动画\r\n    //   linkDistance: 15,\r\n    //   clustering: true,\r\n    //   nodeClusterBy: 'cluster',\r\n    //   preventOverlap: true,\r\n    //   // clusterNodeStrength: -15,\r\n    //   // edgeStrength: 1,\r\n    //   nodeStrength: -80,\r\n    //   // nodeSize: 30,  //节点大小（直径）。用于碰撞检测\r\n    //   nodeSpacing: 5, //`preventOverlap` 为 `true` 时生效, 防止重叠时节点边缘间距的最小值。可以是回调函数\r\n    //   alpha: 0.4,\r\n    //   gravity:999999,//重力的大小，影响布局的紧凑程度\r\n    //   // clusterEdgeDistance: 10,\r\n    //   // clusterNodeSize: 20,\r\n    //   // clusterFociStrength: 1.2,\r\n    //   // center: [width / 2, height / 2],\r\n    //   // onLayoutEnd: () => {      // 可选\r\n    //   //   console.log('layout done');\r\n    //   // }\r\n    // },\r\n\r\n    /* forceAtlas2 layout\r\n      【耗时和布局效果与force调参后相当(减少调参但可控性降低)】\r\n    */\r\n    layout: {\r\n      type: 'forceAtlas2',\r\n      preventOverlap: true,\r\n      prune: false, // 开启后在节点多时，入度为0的同父子节点会重叠，但速度快\r\n      kr: 16,      // 斥力系数，可用于调整布局的紧凑程度。kr 越大，布局越松散\r\n      kg: 10,     // 重力系数。kg 越大，布局越聚集在中心\r\n    },\r\n\r\n    /* force2 layout*/\r\n    // layout: {\r\n    //   type: 'force2',\r\n    //   animate: true,\r\n    //   clustering: true,\r\n    //   nodeClusterBy: 'cluster',\r\n    //   preventOverlap:true,\r\n    //   nodeSpacing: 5,\r\n    //   linkDistance: -10,         // 可选，边长\r\n    //   nodeStrength: 200,         // 可选\r\n    //   edgeStrength: 200,        // 边的作用力（引力）大小,默认值：1000\r\n    //   // nodeSize: 30,             // 可选\r\n    //   // leafCluster: true,        // 叶子结点聚类\r\n    //   // workerEnabled: true,      // 可选，开启 web-worker\r\n    // }, // force2\r\n\r\n    /* gForce layout*/\r\n    // layout: {\r\n    //   type: 'gForce',\r\n    //   // gravity: 10,\r\n    //   // edgeStrength: 100,\r\n    //   preventOverlap: true,     // 是否防止重叠\r\n    //   nodeSize: 1,\r\n    //   nodeSpacing: 1,\r\n    //   // minMovement: 0.1,         // 数字越小，布局越收敛，所用时间将越长\r\n    //   linkDistance: 20,\r\n    //  coulombDisScale: 0.01,        // 节点之间的斥力系数,越大，斥力越大\r\n    //   edgeStrength: 350,\r\n    //   nodeStrength: 500,\r\n    //   gpuEnabled: true          // 可选，开启 GPU 并行计算，G6 4.0 支持\r\n    // },  // 速度快，但是效果略差\r\n\r\n    /* ⭐⭐⭐⭐⭐fruchterman layout\r\n       比较圆润的布局(与其他力导向不同)\r\n       【左上角有个bug】\r\n    *  效果还行，需要调节元素比例 */\r\n    // layout: {\r\n    //   type: 'fruchterman',\r\n    //   maxIteration: 3000,\r\n    //   gravity: 0.6,\r\n    //   gpuEnabled: true, // 可选，开启 GPU 并行计算，G6 4.0 支持\r\n    // },\r\n    modes: {\r\n      default: [\r\n        \"drag-canvas\",//拖拽画布\r\n        \"zoom-canvas\",//鼠标滑轮放大缩小画布\r\n        \"drag-node\",//节点拖拽\r\n        \"click-select\",//click-select  按住shift点击多选 需要下方配置\r\n        \"brush-select\",//brush-select 按住shift滑动鼠标框选多选 需要下方配置\r\n        // 'activate-relations',//高亮相邻节点\r\n      ],\r\n      //   altSelect: [//按住shift点击多选\r\n      //     {\r\n      //       type: \"click-select\",\r\n      //       trigger: \"alt\",\r\n      //     },\r\n      //     \"drag-node\",\r\n      //   ],\r\n      altSelect: [//按住shift滑动鼠标框选多选\r\n        {\r\n          type: \"brush-select\",\r\n          trigger: \"drag\",\r\n        },\r\n        \"drag-node\",\r\n      ],\r\n    },\r\n    defaultNode: {\r\n      size: [4, 0],\r\n      style: {\r\n        lineWidth: 1,\r\n        fill: '#DEE9FF',\r\n        stroke: '#5B8FF9',\r\n        lineAppendWidth: 0,\r\n      },\r\n      labelCfg: {\r\n        position: 'bottom',\r\n        style: {\r\n          fill: '#1890ff',\r\n          fontSize: 2,\r\n        }\r\n      }\r\n    },\r\n    defaultEdge: {\r\n      size: 0.1,\r\n      style: {\r\n        stroke: 'rgb(255,255,255)',\r\n        strokeOpacity: 0.2,\r\n        lineAppendWidth: 1,\r\n      },\r\n    },\r\n    // nodeStateStyles: {\r\n    //   incative:{\r\n    //     lineWidth: 1,\r\n    //     fill: '#DEE9FF',\r\n    //     stroke: '#5B8FF9',\r\n    //     lineAppendWidth:0,\r\n    //   },\r\n    //   active:{\r\n    //     lineWidth: 1,\r\n    //     fill: '#DEE9FF',\r\n    //     stroke: '#5B8FF9',\r\n    //   },\r\n    //   highlight: {\r\n    //     lineWidth: 1,\r\n    //     fill: '#DEE9FF',\r\n    //     stroke: '#5B8FF9',\r\n    //   },\r\n    // },\r\n    // edgeStateStyles: {\r\n    //   inactive: {\r\n    //     lineWidth:0.1,\r\n    //     stroke: 'rgba(255,255,255,0.2)',\r\n    //     lineAppendWidth: 1,\r\n    //   },\r\n    //   active: {\r\n    //     lineWidth:0.1,\r\n    //     stroke: 'rgba(255,255,255,0.2)',\r\n    //     lineAppendWidth: 1,\r\n    //   },\r\n    //   highlight: {\r\n    //     size:0.1,\r\n    //     stroke: 'rgba(255,255,255,0.4)',\r\n    //   },\r\n    // },\r\n  });\r\n\r\n  // 读取 data 中的数据源到图上\r\n  graph.data(processed_dataset);\r\n  // 渲染图\r\n  graph.render();\r\n\r\n\r\n  // graph.zoom(0.4);\r\n  graph.on(\"node:click\", (ev) => {\r\n    console.log(\"clicked\" + ev)\r\n  });//监听节点的点击方法\r\n\r\n}\r\n\r\nonMounted(() => {\r\n  initG6();\r\n  graph.changeSize(document.getElementById(\"g6-container\").clientWidth,\r\n      document.getElementById(\"g6-container\").clientHeight,\r\n  );\r\n})\r\nwatch(() => dataSetStore.dataset_label,()=>{\r\n  // console.log(dataSetStore.dataset_label)\r\n  processed_dataset = clustering(dataSetStore.current_data);\r\n  graph.clear();\r\n  graph.data(processed_dataset);\r\n  graph.render();\r\n  // graph.refresh();\r\n},{deep: true})\r\n\r\n</script>\r\n\r\n<style>\r\n\r\n\r\n</style>\r\n","import script from \"./NetworkG6.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./NetworkG6.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__"],"names":["dataSetStore","useDataSetStore","processed_dataset","current_data","graph","reactive","tooltip","G6","offsetX","offsetY","fixToNode","itemTypes","getContent","e","outDiv","document","createElement","style","width","height","model","item","getModel","getType","innerHTML","id","term","semantic_type","category","source","getSource","target","getTarget","label","title","minimap","container","className","type","colors","strokes","clustering","clusterMap","Map","clusterId","nodes","forEach","node","cluster","undefined","get","set","cid","labelCfg","fill","length","stroke","edges","edge","size","strokeOpacity","toolbar","initG6","getElementById","offsetWidth","offsetHeight","plugins","fitView","fitViewPadding","layout","preventOverlap","prune","kr","kg","modes","default","altSelect","trigger","defaultNode","lineWidth","lineAppendWidth","position","fontSize","defaultEdge","data","render","on","ev","console","log","onMounted","changeSize","clientWidth","clientHeight","watch","dataset_label","clear","deep","__exports__"],"sourceRoot":""}