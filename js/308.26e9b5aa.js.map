{"version":3,"file":"js/308.26e9b5aa.js","mappings":"oPAMA,QAAe,CACbA,KAAM,gB,gCAUR,MAAMC,GAAYC,EAAAA,EAAAA,MAClB,IAAIC,GAAWC,EAAAA,EAAAA,IAAS,MAGxB,MAAMC,GAAsBD,EAAAA,EAAAA,IAAS,CAAC,GACtCC,EAAoBC,MAAQ,GAC5BD,EAAoBE,MAAQ,GAE5B,IAAK,IAAIC,EAAE,EAAEA,EAAEC,EAAAA,MAAAA,GAAAA,OAA0BD,IACzC,CACE,MAAME,EAAc,CAClB,IAAQD,EAAAA,MAAAA,GAAmBD,GAI3B,WAAe,CACb,MAASC,EAAAA,MAAAA,MAAsBD,GAC/B,KAASC,EAAAA,MAAAA,KAAqBD,GAAG,GACjC,MAASC,EAAAA,MAAAA,oBAAoCD,GAC7C,EAA4B,IAArBC,EAAAA,MAAAA,EAAkBD,GACzB,EAA4B,IAArBC,EAAAA,MAAAA,EAAkBD,KAI7BH,EAAoBC,MAAMK,KAAKD,EACjC,CAEA,IAAK,IAAIF,EAAE,EAAEA,EAAEC,EAAAA,MAAAA,KAAAA,OAA4BD,IAC3C,CACE,MAAMI,EAAc,CAClB,GAAMH,EAAAA,MAAAA,KAAqBD,GAC3B,OAAUC,EAAAA,MAAAA,KAAqBD,GAC/B,OAAUC,EAAAA,MAAAA,GAAmBD,GAC7B,WAAc,CACZ,KAAQK,OAAOJ,EAAAA,MAAAA,MAAsBD,GAAGM,MAAM,OAAO,IAAI,IACzD,QAAWD,OAAOJ,EAAAA,MAAAA,MAAsBD,GAAGM,MAAM,OAAO,IAAI,MAShET,EAAoBE,MAAMI,KAAKC,EACjC,CAGA,MAAMG,EAAQ,IAAIC,K,OAClBD,EAAME,OAAOZ,IAuBba,EAAAA,EAAAA,KAAU,KACJf,EAAW,IAAIgB,IAAJ,CAAUJ,EAAOd,EAAUmB,OAKtC,IAAIC,EAAc,KACdC,GAAa,EAMjBnB,EAASoB,GAAG,YAAaC,IACvBF,GAAa,EACbD,EAAcG,EAAEC,KAChBV,EAAMW,iBAAiBL,EAAa,eAAe,EAAK,IAG1DlB,EAASwB,iBAAiBJ,GAAG,iBAAkBC,IAC7C,IAAKF,IAAeD,EAClB,OAEF,MAAMO,EAAMzB,EAAS0B,gBAAgBL,GACrCT,EAAMW,iBAAiBL,EAAa,IAAKO,EAAIE,GAC7Cf,EAAMW,iBAAiBL,EAAa,IAAKO,EAAIG,GAE7CP,EAAEQ,sBACFR,EAAES,SAASC,iBACXV,EAAES,SAASE,iBAAiB,IAG9BhC,EAASwB,iBAAiBJ,GAAG,WAAW,KAClCF,GACFN,EAAMqB,oBAAoBf,EAAa,eAEzCC,GAAa,EACbD,EAAc,IAAI,IAGpBlB,EAASwB,iBAAiBJ,GAAG,aAAa,KACnCpB,EAASkC,iBACZlC,EAASmC,cAAcnC,EAASoC,UAAU,IAE9CC,YAAW,QAEL,IAAO,I,gJCpInB,MAAMC,EAAc,EAEpB,O","sources":["webpack://network_demo/./src/views/NetworkSigma-immune-all.vue","webpack://network_demo/./src/views/NetworkSigma-immune-all.vue?294c"],"sourcesContent":["<template>\r\n  <div class=\"container\" id=\"container\" ref=\"container\" style=\"width: 100%;height: 100%;\">\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'NetworkSigma',\r\n}\r\n</script>\r\n\r\n<script setup>\r\nimport {onMounted, reactive, ref} from 'vue';\r\nimport Graph from 'graphology';\r\nimport Sigma from 'sigma';\r\n\r\n\r\nconst container = ref();\r\nvar renderer = reactive(null)\r\n\r\nimport json_data from \"@/data/network_test_datasets/immune(all).json\"\r\nconst json_data_processed = reactive({});\r\njson_data_processed.nodes = []\r\njson_data_processed.edges = []\r\n// nodes\r\nfor (let i=0;i<json_data.nodes.id.length;i++)\r\n{\r\n  const node_object = {\r\n    \"key\" : json_data.nodes.id[i],\r\n    // \"type\" : json_data.nodes.shape[i],\r\n    // \"category\" : json_data.nodes.category[i],\r\n    // \"style\" :\r\n    \"attributes\" : {\r\n      \"label\" :json_data.nodes.label[i],\r\n      \"size\" : json_data.nodes.size[i]/30,\r\n      \"color\": json_data.nodes['color.background'][i],\r\n      \"x\"  : json_data.nodes.x[i]*40000,\r\n      \"y\"  : json_data.nodes.y[i]*40000,\r\n    }\r\n    // \"labelCfg\" :\r\n  }\r\n  json_data_processed.nodes.push(node_object)\r\n}\r\n// edges\r\nfor (let i=0;i<json_data.edges.from.length;i++)\r\n{\r\n  const edge_object = {\r\n    \"id\": json_data.edges.ends[i],\r\n    \"source\": json_data.edges.from[i],\r\n    \"target\": json_data.edges.to[i],\r\n    \"attributes\": {\r\n      \"size\": Number(json_data.edges.title[i].split(\" : \")[1])/1.5,\r\n      \"opacity\": Number(json_data.edges.title[i].split(\" : \")[1])/1.5,\r\n    }\r\n    // \"type\":,\r\n    // \"sourceAnchor\" : ,\r\n    // \"targetAnchor\" : ,\r\n    // \"style\" : ,\r\n    // \"label\": json_data.edges.title[i],\r\n    // \"labelCfg\" : ,\r\n  }\r\n  json_data_processed.edges.push(edge_object)\r\n}\r\n// console.log(json_data_processed)\r\n\r\nconst graph = new Graph();\r\ngraph.import(json_data_processed)\r\n// import random from 'graphology-layout/random';\r\n// import circular from 'graphology-layout/circular';\r\n// random.assign(graph);\r\n// forceLayout.assign(graph,{\r\n//   maxIterations: 5000,\r\n//   settings: {\r\n//     gravity: 10\r\n//   }\r\n// });\r\n// import ForceSupervisor from 'graphology-layout-force/worker';\r\n// import forceLayout from 'graphology-layout-force';\r\n// const layout = new ForceSupervisor(graph, {\r\n//   maxIterations: 5000,\r\n//   settings: {\r\n//     attraction:0.0005,\r\n//     repulsion:0.0001,\r\n//     gravity: 0.001,\r\n//     inertia:0.9,\r\n//     maxMove: 350\r\n//   }\r\n// });\r\n\r\nonMounted(() => {\r\n      renderer = new Sigma(graph, container.value);\r\n      // layout.start();\r\n      // forceLayout.assign(graph)\r\n\r\n      // State for drag'n'drop\r\n      let draggedNode = null;\r\n      let isDragging = false;\r\n      // On mouse down on a node\r\n      //  - we enable the drag mode\r\n      //  - save in the dragged node in the state\r\n      //  - highlight the node\r\n      //  - disable the camera so its state is not updated\r\n      renderer.on(\"downNode\", (e) => {\r\n        isDragging = true;\r\n        draggedNode = e.node;\r\n        graph.setNodeAttribute(draggedNode, \"highlighted\", true);\r\n      });\r\n      // On mouse move, if the drag mode is enabled, we change the position of the draggedNode\r\n      renderer.getMouseCaptor().on(\"mousemovebody\", (e) => {\r\n        if (!isDragging || !draggedNode)\r\n          return;\r\n        // Get new position of node\r\n        const pos = renderer.viewportToGraph(e);\r\n        graph.setNodeAttribute(draggedNode, \"x\", pos.x);\r\n        graph.setNodeAttribute(draggedNode, \"y\", pos.y);\r\n        // Prevent sigma to move camera:\r\n        e.preventSigmaDefault();\r\n        e.original.preventDefault();\r\n        e.original.stopPropagation();\r\n      });\r\n      // On mouse up, we reset the autoscale and the dragging mode\r\n      renderer.getMouseCaptor().on(\"mouseup\", () => {\r\n        if (draggedNode) {\r\n          graph.removeNodeAttribute(draggedNode, \"highlighted\");\r\n        }\r\n        isDragging = false;\r\n        draggedNode = null;\r\n      });\r\n      // Disable the autoscale at the first down interaction\r\n      renderer.getMouseCaptor().on(\"mousedown\", () => {\r\n        if (!renderer.getCustomBBox())\r\n          renderer.setCustomBBox(renderer.getBBox());\r\n      });\r\n      setTimeout(()=>{\r\n            // layout.stop();\r\n          },5*1000)\r\n    }\r\n);\r\n\r\n</script>\r\n\r\n<style>\r\n\r\n\r\n</style>","import script from \"./NetworkSigma-immune-all.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./NetworkSigma-immune-all.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__"],"names":["name","container","ref","renderer","reactive","json_data_processed","nodes","edges","i","json_data","node_object","push","edge_object","Number","split","graph","Graph","import","onMounted","Sigma","value","draggedNode","isDragging","on","e","node","setNodeAttribute","getMouseCaptor","pos","viewportToGraph","x","y","preventSigmaDefault","original","preventDefault","stopPropagation","removeNodeAttribute","getCustomBBox","setCustomBBox","getBBox","setTimeout","__exports__"],"sourceRoot":""}