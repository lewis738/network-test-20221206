{"version":3,"file":"js/755.ddfff539.js","mappings":"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","sources":["webpack://network_demo/./node_modules/graphology-layout-force/defaults.js","webpack://network_demo/./node_modules/graphology-layout-force/helpers.js","webpack://network_demo/./node_modules/graphology-layout-force/iterate.js","webpack://network_demo/./node_modules/graphology-layout-force/worker.js","webpack://network_demo/./node_modules/graphology-layout/random.js","webpack://network_demo/./node_modules/graphology-utils/defaults.js","webpack://network_demo/./node_modules/graphology-utils/getters.js","webpack://network_demo/./src/views/NetworkSigma.vue","webpack://network_demo/./src/views/NetworkSigma.vue?0dc4"],"sourcesContent":["/**\n * Graphology Force Layout Defaults\n * =================================\n *\n * Default options & settings used by the library.\n */\nmodule.exports = {\n  nodeXAttribute: 'x',\n  nodeYAttribute: 'y',\n  isNodeFixed: 'fixed',\n  shouldSkipNode: null,\n  shouldSkipEdge: null,\n  settings: {\n    attraction: 0.0005,\n    repulsion: 0.1,\n    gravity: 0.0001,\n    inertia: 0.6,\n    maxMove: 200\n  }\n};\n","/**\n * Graphology Force Layout Helpers\n * ================================\n *\n * Miscellaneous helper functions related to the force layout.\n */\nexports.assignLayoutChanges = function (graph, nodeStates, params) {\n  const {nodeXAttribute: x, nodeYAttribute: y} = params;\n\n  graph.updateEachNodeAttributes(\n    (n, attr) => {\n      const state = nodeStates[n];\n\n      if (!state || state.fixed) return attr;\n\n      attr[x] = state.x;\n      attr[y] = state.y;\n\n      return attr;\n    },\n    {attributes: ['x', 'y']}\n  );\n};\n\nexports.collectLayoutChanges = function (nodeStates) {\n  const mapping = {};\n\n  for (const n in nodeStates) {\n    const state = nodeStates[n];\n\n    mapping[n] = {x: state.x, y: state.y};\n  }\n\n  return mapping;\n};\n","/**\n * Graphology Force Layout Iteration\n * ==================================\n *\n * Function describing a single iteration of the force layout.\n */\nconst {\n  createNodeValueGetter,\n  createEdgeValueGetter\n} = require('graphology-utils/getters');\n\n// const EPSILON = -Infinity;\n\n// function isVeryCloseToZero(x) {\n//   return Math.abs(x) < EPSILON;\n// }\n\nmodule.exports = function iterate(graph, nodeStates, params) {\n  const {nodeXAttribute: xKey, nodeYAttribute: yKey} = params;\n  const {attraction, repulsion, gravity, inertia, maxMove} = params.settings;\n\n  let {shouldSkipNode, shouldSkipEdge, isNodeFixed} = params;\n\n  isNodeFixed = createNodeValueGetter(isNodeFixed);\n  shouldSkipNode = createNodeValueGetter(shouldSkipNode, false);\n  shouldSkipEdge = createEdgeValueGetter(shouldSkipEdge, false);\n\n  const nodes = graph.filterNodes((n, attr) => {\n    return !shouldSkipNode.fromEntry(n, attr);\n  });\n\n  const adjustedOrder = nodes.length;\n\n  // Check nodeStatess and inertia\n  for (let i = 0; i < adjustedOrder; i++) {\n    const n = nodes[i];\n    const attr = graph.getNodeAttributes(n);\n    const nodeState = nodeStates[n];\n\n    if (!nodeState)\n      nodeStates[n] = {\n        dx: 0,\n        dy: 0,\n        x: attr[xKey] || 0,\n        y: attr[yKey] || 0\n      };\n    else\n      nodeStates[n] = {\n        dx: nodeState.dx * inertia,\n        dy: nodeState.dy * inertia,\n        x: attr[xKey] || 0,\n        y: attr[yKey] || 0\n      };\n  }\n\n  // Repulsion\n  if (repulsion)\n    for (let i = 0; i < adjustedOrder; i++) {\n      const n1 = nodes[i];\n      const n1State = nodeStates[n1];\n\n      for (let j = i + 1; j < adjustedOrder; j++) {\n        const n2 = nodes[j];\n        const n2State = nodeStates[n2];\n\n        // Compute distance:\n        const dx = n2State.x - n1State.x;\n        const dy = n2State.y - n1State.y;\n        const distance = Math.sqrt(dx * dx + dy * dy) || 1;\n\n        // Repulse nodes relatively to 1 / distance:\n        const repulsionX = (repulsion / distance) * dx;\n        const repulsionY = (repulsion / distance) * dy;\n        n1State.dx -= repulsionX;\n        n1State.dy -= repulsionY;\n        n2State.dx += repulsionX;\n        n2State.dy += repulsionY;\n      }\n    }\n\n  // Attraction\n  if (attraction)\n    graph.forEachEdge(\n      (edge, attr, source, target, sourceAttr, targetAttr, undirected) => {\n        if (source === target) return;\n\n        if (\n          shouldSkipNode.fromEntry(source, sourceAttr) ||\n          shouldSkipNode.fromEntry(target, targetAttr)\n        )\n          return;\n\n        if (\n          shouldSkipEdge.fromEntry(\n            edge,\n            attr,\n            source,\n            target,\n            sourceAttr,\n            targetAttr,\n            undirected\n          )\n        )\n          return;\n\n        const n1State = nodeStates[source];\n        const n2State = nodeStates[target];\n\n        // Compute distance:\n        const dx = n2State.x - n1State.x;\n        const dy = n2State.y - n1State.y;\n\n        const distance = Math.sqrt(dx * dx + dy * dy) || 1;\n\n        // Attract nodes relatively to their distance:\n        const attractionX = attraction * distance * dx;\n        const attractionY = attraction * distance * dy;\n        n1State.dx += attractionX;\n        n1State.dy += attractionY;\n        n2State.dx -= attractionX;\n        n2State.dy -= attractionY;\n      }\n    );\n\n  // Gravity\n  if (gravity)\n    for (let i = 0; i < adjustedOrder; i++) {\n      const n = nodes[i];\n      const nodeState = nodeStates[n];\n\n      // Attract nodes to [0, 0] relatively to the distance:\n      const {x, y} = nodeState;\n      const distance = Math.sqrt(x * x + y * y) || 1;\n      nodeStates[n].dx -= x * gravity * distance;\n      nodeStates[n].dy -= y * gravity * distance;\n    }\n\n  // Apply forces\n  const converged = false;\n\n  for (let i = 0; i < adjustedOrder; i++) {\n    const n = nodes[i];\n    const nodeState = nodeStates[n];\n\n    const distance = Math.sqrt(\n      nodeState.dx * nodeState.dx + nodeState.dy * nodeState.dy\n    );\n\n    if (distance > maxMove) {\n      nodeState.dx *= maxMove / distance;\n      nodeState.dy *= maxMove / distance;\n    }\n\n    // if (!isVeryCloseToZero(nodeState.dx) || !isVeryCloseToZero(nodeState.dy)) {\n    //   converged = false;\n    // }\n\n    if (!isNodeFixed.fromGraph(graph, n)) {\n      nodeState.x += nodeState.dx;\n      nodeState.y += nodeState.dy;\n      nodeState.fixed = false;\n    } else {\n      nodeState.fixed = true;\n    }\n\n    // NOTE: possibility to assign here to save one loop in the future\n  }\n\n  return {converged};\n};\n","/**\n * Graphology Force Layout Worker\n * ===============================\n *\n * A worker made for running a force layout live.\n *\n * Note that it does not run in a webworker yet but respect animation frames.\n */\nconst isGraph = require('graphology-utils/is-graph');\nconst resolveDefaults = require('graphology-utils/defaults');\n\nconst iterate = require('./iterate.js');\nconst helpers = require('./helpers.js');\nconst DEFAULTS = require('./defaults.js');\n\nfunction ForceSupervisor(graph, params) {\n  // Validation\n  if (!isGraph(graph))\n    throw new Error(\n      'graphology-layout-force/worker: the given graph is not a valid graphology instance.'\n    );\n\n  params = resolveDefaults(params, DEFAULTS);\n\n  this.callbacks = {};\n\n  if (params.onConverged) this.callbacks.onConverged = params.onConverged;\n\n  this.graph = graph;\n  this.params = params;\n  this.nodeStates = {};\n  this.frameID = null;\n  this.running = false;\n  this.killed = false;\n\n  // TODO: hook listeners on graph to listen to dropNode, dropEdge, clear, clearEdges\n}\n\nForceSupervisor.prototype.isRunning = function () {\n  return this.running;\n};\n\nForceSupervisor.prototype.runFrame = function () {\n  let {converged} = iterate(this.graph, this.nodeStates, this.params);\n\n  helpers.assignLayoutChanges(this.graph, this.nodeStates, this.params);\n\n  // TODO: figure out convergence\n  converged = false;\n\n  if (converged) {\n    if (this.callbacks.onConverged) this.callbacks.onConverged();\n    this.stop();\n  } else {\n    this.frameID = window.requestAnimationFrame(() => this.runFrame());\n  }\n};\n\nForceSupervisor.prototype.stop = function () {\n  this.running = false;\n\n  if (this.frameID !== null) {\n    window.cancelAnimationFrame(this.frameID);\n    this.frameID = null;\n  }\n\n  return this;\n};\n\nForceSupervisor.prototype.start = function () {\n  if (this.killed)\n    throw new Error('graphology-layout-force/worker.start: layout was killed.');\n\n  if (this.running) return;\n\n  this.running = true;\n  this.runFrame();\n};\n\nForceSupervisor.prototype.kill = function () {\n  this.stop();\n  delete this.nodeStates;\n  this.killed = true;\n\n  // TODO: cleanup events\n};\n\nmodule.exports = ForceSupervisor;\n","/**\n * Graphology Random Layout\n * =========================\n *\n * Simple layout giving uniform random positions to the nodes.\n */\nvar resolveDefaults = require('graphology-utils/defaults');\nvar isGraph = require('graphology-utils/is-graph');\n\n/**\n * Default options.\n */\nvar DEFAULTS = {\n  dimensions: ['x', 'y'],\n  center: 0.5,\n  rng: Math.random,\n  scale: 1\n};\n\n/**\n * Abstract function running the layout.\n *\n * @param  {Graph}    graph          - Target  graph.\n * @param  {object}   [options]      - Options:\n * @param  {array}      [dimensions] - List of dimensions of the layout.\n * @param  {number}     [center]     - Center of the layout.\n * @param  {function}   [rng]        - Custom RNG function to be used.\n * @param  {number}     [scale]      - Scale of the layout.\n * @return {object}                  - The positions by node.\n */\nfunction genericRandomLayout(assign, graph, options) {\n  if (!isGraph(graph))\n    throw new Error(\n      'graphology-layout/random: the given graph is not a valid graphology instance.'\n    );\n\n  options = resolveDefaults(options, DEFAULTS);\n\n  var dimensions = options.dimensions;\n\n  if (!Array.isArray(dimensions) || dimensions.length < 1)\n    throw new Error('graphology-layout/random: given dimensions are invalid.');\n\n  var d = dimensions.length;\n  var center = options.center;\n  var rng = options.rng;\n  var scale = options.scale;\n\n  var offset = (center - 0.5) * scale;\n\n  function assignPosition(target) {\n    for (var i = 0; i < d; i++) {\n      target[dimensions[i]] = rng() * scale + offset;\n    }\n\n    return target;\n  }\n\n  if (!assign) {\n    var positions = {};\n\n    graph.forEachNode(function (node) {\n      positions[node] = assignPosition({});\n    });\n\n    return positions;\n  }\n\n  graph.updateEachNodeAttributes(\n    function (_, attr) {\n      assignPosition(attr);\n      return attr;\n    },\n    {\n      attributes: dimensions\n    }\n  );\n}\n\nvar randomLayout = genericRandomLayout.bind(null, false);\nrandomLayout.assign = genericRandomLayout.bind(null, true);\n\nmodule.exports = randomLayout;\n","/**\n * Graphology Defaults\n * ====================\n *\n * Helper function used throughout the standard lib to resolve defaults.\n */\nfunction isLeaf(o) {\n  return (\n    !o ||\n    typeof o !== 'object' ||\n    typeof o === 'function' ||\n    Array.isArray(o) ||\n    o instanceof Set ||\n    o instanceof Map ||\n    o instanceof RegExp ||\n    o instanceof Date\n  );\n}\n\nfunction resolveDefaults(target, defaults) {\n  target = target || {};\n\n  var output = {};\n\n  for (var k in defaults) {\n    var existing = target[k];\n    var def = defaults[k];\n\n    // Recursion\n    if (!isLeaf(def)) {\n      output[k] = resolveDefaults(existing, def);\n\n      continue;\n    }\n\n    // Leaf\n    if (existing === undefined) {\n      output[k] = def;\n    } else {\n      output[k] = existing;\n    }\n  }\n\n  return output;\n}\n\nmodule.exports = resolveDefaults;\n","/**\n * Graphology Weight Getter\n * =========================\n *\n * Function creating weight getters.\n */\nfunction coerceWeight(value) {\n  // Ensuring target value is a correct number\n  if (typeof value !== 'number' || isNaN(value)) return 1;\n\n  return value;\n}\n\nfunction createNodeValueGetter(nameOrFunction, defaultValue) {\n  var getter = {};\n\n  var coerceToDefault = function (v) {\n    if (typeof v === 'undefined') return defaultValue;\n\n    return v;\n  };\n\n  if (typeof defaultValue === 'function') coerceToDefault = defaultValue;\n\n  var get = function (attributes) {\n    return coerceToDefault(attributes[nameOrFunction]);\n  };\n\n  var returnDefault = function () {\n    return coerceToDefault(undefined);\n  };\n\n  if (typeof nameOrFunction === 'string') {\n    getter.fromAttributes = get;\n    getter.fromGraph = function (graph, node) {\n      return get(graph.getNodeAttributes(node));\n    };\n    getter.fromEntry = function (node, attributes) {\n      return get(attributes);\n    };\n  } else if (typeof nameOrFunction === 'function') {\n    getter.fromAttributes = function () {\n      throw new Error(\n        'graphology-utils/getters/createNodeValueGetter: irrelevant usage.'\n      );\n    };\n    getter.fromGraph = function (graph, node) {\n      return coerceToDefault(\n        nameOrFunction(node, graph.getNodeAttributes(node))\n      );\n    };\n    getter.fromEntry = function (node, attributes) {\n      return coerceToDefault(nameOrFunction(node, attributes));\n    };\n  } else {\n    getter.fromAttributes = returnDefault;\n    getter.fromGraph = returnDefault;\n    getter.fromEntry = returnDefault;\n  }\n\n  return getter;\n}\n\nfunction createEdgeValueGetter(nameOrFunction, defaultValue) {\n  var getter = {};\n\n  var coerceToDefault = function (v) {\n    if (typeof v === 'undefined') return defaultValue;\n\n    return v;\n  };\n\n  if (typeof defaultValue === 'function') coerceToDefault = defaultValue;\n\n  var get = function (attributes) {\n    return coerceToDefault(attributes[nameOrFunction]);\n  };\n\n  var returnDefault = function () {\n    return coerceToDefault(undefined);\n  };\n\n  if (typeof nameOrFunction === 'string') {\n    getter.fromAttributes = get;\n    getter.fromGraph = function (graph, edge) {\n      return get(graph.getEdgeAttributes(edge));\n    };\n    getter.fromEntry = function (edge, attributes) {\n      return get(attributes);\n    };\n    getter.fromPartialEntry = getter.fromEntry;\n    getter.fromMinimalEntry = getter.fromEntry;\n  } else if (typeof nameOrFunction === 'function') {\n    getter.fromAttributes = function () {\n      throw new Error(\n        'graphology-utils/getters/createEdgeValueGetter: irrelevant usage.'\n      );\n    };\n    getter.fromGraph = function (graph, edge) {\n      // TODO: we can do better, check #310\n      var extremities = graph.extremities(edge);\n      return coerceToDefault(\n        nameOrFunction(\n          edge,\n          graph.getEdgeAttributes(edge),\n          extremities[0],\n          extremities[1],\n          graph.getNodeAttributes(extremities[0]),\n          graph.getNodeAttributes(extremities[1]),\n          graph.isUndirected(edge)\n        )\n      );\n    };\n    getter.fromEntry = function (e, a, s, t, sa, ta, u) {\n      return coerceToDefault(nameOrFunction(e, a, s, t, sa, ta, u));\n    };\n    getter.fromPartialEntry = function (e, a, s, t) {\n      return coerceToDefault(nameOrFunction(e, a, s, t));\n    };\n    getter.fromMinimalEntry = function (e, a) {\n      return coerceToDefault(nameOrFunction(e, a));\n    };\n  } else {\n    getter.fromAttributes = returnDefault;\n    getter.fromGraph = returnDefault;\n    getter.fromEntry = returnDefault;\n    getter.fromMinimalEntry = returnDefault;\n  }\n\n  return getter;\n}\n\nexports.createNodeValueGetter = createNodeValueGetter;\nexports.createEdgeValueGetter = createEdgeValueGetter;\nexports.createEdgeWeightGetter = function (name) {\n  return createEdgeValueGetter(name, coerceWeight);\n};\n","<template>\r\n  <div class=\"container\" id=\"container\" ref=\"container\" style=\"width: 100%;height: 100%;\">\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'NetworkSigma',\r\n}\r\n</script>\r\n\r\n<script setup>\r\nimport {onMounted, reactive, ref} from 'vue';\r\nimport Graph from 'graphology';\r\nimport Sigma from 'sigma';\r\n\r\n\r\nconst container = ref();\r\nvar renderer = reactive(null)\r\n\r\nimport json_data from \"@/data/network_test_datasets/[drug]spine(all).json\"\r\nconst json_data_processed = reactive({});\r\njson_data_processed.nodes = []\r\njson_data_processed.edges = []\r\n// nodes\r\nfor (let i=0;i<json_data.nodes.id.length;i++)\r\n{\r\n  const node_object = {\r\n    \"key\" : json_data.nodes.id[i],\r\n    \"x\"  : json_data.nodes.x[i]*800,\r\n    \"y\"  : json_data.nodes.y[i]*800,\r\n    // \"type\" : json_data.nodes.shape[i],\r\n    // \"category\" : json_data.nodes.category[i],\r\n    // \"style\" :\r\n    \"attributes\" : {\r\n      \"label\" :json_data.nodes.label[i],\r\n      \"size\" : json_data.nodes.size[i]/3,\r\n      \"color\": json_data.nodes['color.background'][i],\r\n\r\n    }\r\n    // \"labelCfg\" :\r\n  }\r\n  json_data_processed.nodes.push(node_object)\r\n}\r\n// edges\r\nfor (let i=0;i<json_data.edges.from.length;i++)\r\n{\r\n  const edge_object = {\r\n    \"id\": json_data.edges.ends[i],\r\n    \"source\": json_data.edges.from[i],\r\n    \"target\": json_data.edges.to[i],\r\n    // \"type\":,\r\n    // \"sourceAnchor\" : ,\r\n    // \"targetAnchor\" : ,\r\n    // \"style\" : ,\r\n    // \"label\": json_data.edges.title[i],\r\n    // \"labelCfg\" : ,\r\n  }\r\n  json_data_processed.edges.push(edge_object)\r\n}\r\n// console.log(json_data_processed)\r\n\r\nconst graph = new Graph();\r\ngraph.import(json_data_processed)\r\nimport random from 'graphology-layout/random';\r\n// import circular from 'graphology-layout/circular';\r\nrandom.assign(graph);\r\n// forceLayout.assign(graph,{\r\n//   maxIterations: 5000,\r\n//   settings: {\r\n//     gravity: 10\r\n//   }\r\n// });\r\nimport ForceSupervisor from 'graphology-layout-force/worker';\r\n// import forceLayout from 'graphology-layout-force';\r\nconst layout = new ForceSupervisor(graph, {\r\n  maxIterations: 5000,\r\n  settings: {\r\n    attraction:0.0005,\r\n    repulsion:0.0001,\r\n    gravity: 0.001,\r\n    inertia:0.9,\r\n    maxMove: 350\r\n  }\r\n});\r\n\r\nonMounted(() => {\r\n      renderer = new Sigma(graph, container.value);\r\n      layout.start();\r\n      // forceLayout.assign(graph)\r\n\r\n      // State for drag'n'drop\r\n      let draggedNode = null;\r\n      let isDragging = false;\r\n      // On mouse down on a node\r\n      //  - we enable the drag mode\r\n      //  - save in the dragged node in the state\r\n      //  - highlight the node\r\n      //  - disable the camera so its state is not updated\r\n      renderer.on(\"downNode\", (e) => {\r\n        isDragging = true;\r\n        draggedNode = e.node;\r\n        graph.setNodeAttribute(draggedNode, \"highlighted\", true);\r\n      });\r\n      // On mouse move, if the drag mode is enabled, we change the position of the draggedNode\r\n      renderer.getMouseCaptor().on(\"mousemovebody\", (e) => {\r\n        if (!isDragging || !draggedNode)\r\n          return;\r\n        // Get new position of node\r\n        const pos = renderer.viewportToGraph(e);\r\n        graph.setNodeAttribute(draggedNode, \"x\", pos.x);\r\n        graph.setNodeAttribute(draggedNode, \"y\", pos.y);\r\n        // Prevent sigma to move camera:\r\n        e.preventSigmaDefault();\r\n        e.original.preventDefault();\r\n        e.original.stopPropagation();\r\n      });\r\n      // On mouse up, we reset the autoscale and the dragging mode\r\n      renderer.getMouseCaptor().on(\"mouseup\", () => {\r\n        if (draggedNode) {\r\n          graph.removeNodeAttribute(draggedNode, \"highlighted\");\r\n        }\r\n        isDragging = false;\r\n        draggedNode = null;\r\n      });\r\n      // Disable the autoscale at the first down interaction\r\n      renderer.getMouseCaptor().on(\"mousedown\", () => {\r\n        if (!renderer.getCustomBBox())\r\n          renderer.setCustomBBox(renderer.getBBox());\r\n      });\r\n      setTimeout(()=>{\r\n            layout.stop();\r\n          },5*1000)\r\n    }\r\n);\r\n\r\n</script>\r\n\r\n<style>\r\n\r\n\r\n</style>","import script from \"./NetworkSigma.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./NetworkSigma.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__"],"names":["module","exports","nodeXAttribute","nodeYAttribute","isNodeFixed","shouldSkipNode","shouldSkipEdge","settings","attraction","repulsion","gravity","inertia","maxMove","assignLayoutChanges","graph","nodeStates","params","x","y","updateEachNodeAttributes","n","attr","state","fixed","attributes","collectLayoutChanges","mapping","createNodeValueGetter","createEdgeValueGetter","require","xKey","yKey","nodes","filterNodes","fromEntry","adjustedOrder","length","i","getNodeAttributes","nodeState","dx","dy","n1","n1State","j","n2","n2State","distance","Math","sqrt","repulsionX","repulsionY","forEachEdge","edge","source","target","sourceAttr","targetAttr","undirected","attractionX","attractionY","converged","fromGraph","isGraph","resolveDefaults","iterate","helpers","DEFAULTS","ForceSupervisor","Error","this","callbacks","onConverged","frameID","running","killed","prototype","isRunning","runFrame","stop","window","requestAnimationFrame","cancelAnimationFrame","start","kill","dimensions","center","rng","random","scale","genericRandomLayout","assign","options","Array","isArray","d","offset","assignPosition","positions","forEachNode","node","_","randomLayout","bind","isLeaf","o","Set","Map","RegExp","Date","defaults","output","k","existing","def","undefined","coerceWeight","value","isNaN","nameOrFunction","defaultValue","getter","coerceToDefault","v","get","returnDefault","fromAttributes","getEdgeAttributes","fromPartialEntry","fromMinimalEntry","extremities","isUndirected","e","a","s","t","sa","ta","u","createEdgeWeightGetter","name","container","ref","renderer","reactive","json_data_processed","edges","json_data","node_object","push","edge_object","Graph","import","layout","maxIterations","onMounted","Sigma","draggedNode","isDragging","on","setNodeAttribute","getMouseCaptor","pos","viewportToGraph","preventSigmaDefault","original","preventDefault","stopPropagation","removeNodeAttribute","getCustomBBox","setCustomBBox","getBBox","setTimeout","__exports__"],"sourceRoot":""}